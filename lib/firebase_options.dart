// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'

    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
Future<void> main() async {
  await dotenv.load(fileName: ".env");

}

class DefaultFirebaseOptions {
  // Configurazione per web
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDbmXGUoGFCDheDVTj0hw-wcyMPw98w23E',
    appId: '1:1051759939227:web:b34f7d629a4d79935d003e',
    messagingSenderId: '1051759939227',
    projectId: 'travelsage-2fbbc',
    authDomain: 'travelsage-2fbbc.firebaseapp.com',
    storageBucket: 'travelsage-2fbbc.appspot.com',
    measurementId: 'G-BVR6GRSVNW',
  );

  // Configurazione per Android
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAWBu_dTZCy_mRmooX5lkGwLLseIXLKwEs',
    appId: '1:1051759939227:android:d7927544336b17aa5d003e',
    messagingSenderId: '1051759939227',
    projectId: 'travelsage-2fbbc',
    storageBucket: 'travelsage-2fbbc.appspot.com',
  );

  // Configurazione per iOS
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIza...', // Sostituisci con la tua chiave iOS
    appId: '1:1051759939227:ios:...', // Sostituisci con il tuo app ID iOS
    messagingSenderId: '1051759939227',
    projectId: 'travelsage-2fbbc',
    storageBucket: 'travelsage-2fbbc.appspot.com',
    iosBundleId: 'com.example.travelSage',
  );

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    
    // Carica le variabili d'ambiente SOLO per mobile
    final envVars = kIsWeb ? {} : dotenv.env;
    
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return ios; // Usa la stessa config di iOS per macOS
      case TargetPlatform.windows:
        return FirebaseOptions(
          apiKey: envVars['FIREBASE_API_KEY'] ?? web.apiKey,
          appId: envVars['FIREBASE_APP_ID'] ?? web.appId,
          messagingSenderId: envVars['FIREBASE_MESSAGING_SENDER_ID'] ?? web.messagingSenderId,
          projectId: envVars['FIREBASE_PROJECT_ID'] ?? web.projectId,
          authDomain: envVars['FIREBASE_AUTH_DOMAIN'] ?? web.authDomain,
          storageBucket: envVars['FIREBASE_STORAGE_BUCKET'] ?? web.storageBucket,
          measurementId: envVars['FIREBASE_MEASUREMENT_ID'] ?? web.measurementId,
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}