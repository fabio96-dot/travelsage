// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'

    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
Future<void> main() async {
  await dotenv.load(fileName: ".env");

}

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // Load environment variables
    final apiKey = dotenv.env['FIREBASE_API_KEY'];
    final appId = dotenv.env['FIREBASE_APP_ID'];
    final messagingSenderId = dotenv.env['FIREBASE_MESSAGING_SENDER_ID'];
    final projectId = dotenv.env['FIREBASE_PROJECT_ID'];
    final storageBucket = dotenv.env['FIREBASE_STORAGE_BUCKET'];

    // Verify required environment variables
    if (apiKey == null || appId == null) {
      throw AssertionError(
        'Required Firebase environment variables (FIREBASE_API_KEY and FIREBASE_APP_ID) are missing in .env file',
      );
    }

    // Common configuration for all platforms
    final baseOptions = FirebaseOptions(
      apiKey: apiKey,
      appId: appId,
      messagingSenderId: messagingSenderId ?? '',
      projectId: projectId ?? 'travelsage-2fbbc',
      storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
    );

    if (kIsWeb) {
      return FirebaseOptions(
        apiKey: apiKey,
        appId: appId,
        messagingSenderId: messagingSenderId ?? '1051759939227',
        projectId: projectId ?? 'travelsage-2fbbc',
        authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN'] ?? 'travelsage-2fbbc.firebaseapp.com',
        storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
        measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID'] ?? 'G-BVR6GRSVNW',
      );
    }

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: apiKey,
          appId: appId,
          messagingSenderId: messagingSenderId ?? '1051759939227',
          projectId: projectId ?? 'travelsage-2fbbc',
          storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: apiKey,
          appId: appId,
          messagingSenderId: messagingSenderId ?? '1051759939227',
          projectId: projectId ?? 'travelsage-2fbbc',
          storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID'] ?? 'com.example.travelSage',
        );
      case TargetPlatform.macOS:
        return FirebaseOptions(
          apiKey: apiKey,
          appId: appId,
          messagingSenderId: messagingSenderId ?? '1051759939227',
          projectId: projectId ?? 'travelsage-2fbbc',
          storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID'] ?? 'com.example.travelSage',
        );
      case TargetPlatform.windows:
        return FirebaseOptions(
          apiKey: apiKey,
          appId: appId,
          messagingSenderId: messagingSenderId ?? '1051759939227',
          projectId: projectId ?? 'travelsage-2fbbc',
          authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN'] ?? 'travelsage-2fbbc.firebaseapp.com',
          storageBucket: storageBucket ?? 'travelsage-2fbbc.appspot.com',
          measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID'] ?? 'G-RJZKZXNDNW',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}